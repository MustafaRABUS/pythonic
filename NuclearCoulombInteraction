# 3D NuclearCoulombInteractionSimulation
# Author:"Mustafa RABUS"

import matplotlib.pyplot as plt
from math import*
import random

d=19300 #Au Kg/m3
Ei=(5.5*10**6)*1.602*10**(-19) #J 241Am Alpha
mi=4.01*1.661*10**(-27) #Kg
mt=196.967*1.661*10**(-27) #Kg
Z=79
z=2
q1,q2,k=z*1.602*10**(-19),Z*1.602*10**(-19),9*10**9
n=10000 #projektile/m2s
L=5*10**(-12) #m
dxyz=5*10**(-14) #m
Lx,Ly,Lz,rmin,amin,anmax,b1,b2=L,L,L,L,1,0,0,0
x,y,z,xyz,vx,vy,vz,a,an,b=[],[],[],[],[],[],[],[],[],[]
v=sqrt(2*Ei/mi) #m/s
dt=dxyz/v
step=round(2*Lx/dxyz)

for i in range(n):
    x.append(-Lx)
    b.append(random.uniform(-L,L))
    y.append(b[i]*cos(radians(random.uniform(0,180))))
    z.append(sqrt(b[i]**2-y[i]**2)*(b[i]/sqrt(b[i]**2)))
    xyz.append((x[i],y[i],z[i]))
    vx.append(v)
    vy.append(0)
    vz.append(0)

for j in range (step):
    ax = plt.axes(projection='3d')
    ax.view_init(10,-90)
    ax.grid()
    ax.plot3D(-Lx, -Ly, -Lz,'-')
    ax.plot3D(Lx, Ly, Lz,'-')
    ax.plot3D(0,0,0,'ob')
    for i in range(n):
        r=sqrt(x[i]**2+y[i]**2+z[i]**2)
        F=k*q1*q2/r**2
        vx[i]=vx[i]+F*dt*(x[i]/r)/mi
        vy[i]=vy[i]+F*dt*(y[i]/r)/mi
        vz[i]=vz[i]+F*dt*(z[i]/r)/mi
        x[i]=x[i]+vx[i]*dt
        y[i]=y[i]+vy[i]*dt
        z[i]=z[i]+vz[i]*dt
        if rmin>r:rmin=r
    ax.plot3D(x,y,z,'.r',markersize='3')
    ax.set_title("NUCLEAR COULOMB INTERACTION SIMULATION")
    ax.set_xlabel('X (m)')
    ax.set_ylabel('Y (m)')
    ax.set_zlabel('Z (m)')
    plt.pause(0.01)
    plt.clf()

ax = plt.axes(projection='3d')
ax.view_init(10,-90)
ax.grid()
ax.plot3D(-Lx, -Ly, -Lz,'-')
ax.plot3D(Lx, Ly, Lz,'-')
ax.plot3D(0,0,0,'ob')
ax.plot3D(x,y,z,'.r',markersize='3')
ax.set_title("NUCLEAR COULOMB INTERACTION SIMULATION")
ax.set_xlabel('X (m)')
ax.set_ylabel('Y (m)')
ax.set_zlabel('Z (m)')
plt.show()

for i in range(n):
    dyz=sqrt((y[i]-xyz[i][1])**2+(z[i]-xyz[i][2])**2)
    if x[i]<0:a.append(90+abs(degrees(atan(dyz/x[i]))))
    else: a.append(degrees(atan(dyz/x[i])))
    if amin>a[i]:
        amin=a[i]
        b1=b[i]
    if a[i]>2.59 and a[i]<2.61:
        if b2<b[i]:b2=b[i]

for i in range(180):an.append(0)
for i in a:
    for j in range(180):
        if i>=j and i<(j+1):an[j]=an[j]+1
        if anmax<an[j]:anmax=an[j]

for i in range(180):
    if i>=0 and i<1:an0=an[i]/anmax
    if i>=10 and i<11:an1=an[i]/anmax
    if i>=20 and i<21:an2=an[i]/anmax
    if i>=40 and i<41:an3=an[i]/anmax
    if i>=80 and i<81:an4=an[i]/anmax
    plt.bar(i,an[i],label=i,width=1)#/anmax

plt.xlabel("SCATTERING ANGLE")
plt.ylabel("SCATTERING PARTICLE RATE")
plt.title("RUTHERFORD SCATTERING ANGLE-PARTICLE RATE")
plt.show()
plt.plot(a,b,'.r',markersize='2')
plt.xlabel("SCATTERING ANGLE")
plt.ylabel("IMPACT PARAMETER")
plt.title("RUTHERFORD SCATTERING ANGLE-IMPACT PARAMETER")
plt.show()

print(round(amin,2),'Degree b1:',b1)
print('2.6 Degree b2:',b2)
print('CoulombForceRadius rmin:',rmin)
print('0 Degree particle:',an0)
print('10 Degree particle:',an1)
print('20 Degree particle:',an2)
print('40 Degree particle:',an3)
print('80 Degree particle:',an4)
