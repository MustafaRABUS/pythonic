# 3D NuclearCoulombInteractionSimulation
# Author:"Mustafa RABUS"

import matplotlib.pyplot as plt
from math import*
import random

d=19300 #Au Kg/m3
Ei=(5.5*10**6)*1.602*10**(-19) #J 241Am Alpha
mi=4.01*1.661*10**(-27) #Kg
mt=196.967*1.661*10**(-27) #Kg
Z=79
z=2
q1,q2,k=z*1.602*10**(-19),Z*1.602*10**(-19),9*10**9
n=100000 #.../m2s
L=5*10**(-12) #m
Lx,Ly,Lz,amin,anmax,rmin,b1,b2=L,L,L,10,0,L,0,0
v=sqrt(2*Ei/mi) #J
dxyz=10**(-14) #m
dt=dxyz/v
step=round(2*Lx/dxyz)
xi,yi,zi,xyz,dvx,dvy,dvz,a,an,b=[],[],[],[],[],[],[],[],[],[]

for i in range(n):
    xi.append(-L)
    dr=random.uniform(-L,L)
    yi.append(dr*cos(radians(random.uniform(0,180))))
    zi.append(sqrt(dr**2-yi[i]**2)*(dr/sqrt(dr**2)))
    xyz.append((xi[i],yi[i],zi[i]))
    dvx.append(v)
    dvy.append(0)
    dvz.append(0)
for j in range (step):
    ax = plt.axes(projection='3d')
    ax.view_init(10,-90)
    ax.grid()
    ax.plot3D(-Lx, -Ly, -Lz,'-')
    ax.plot3D(Lx, Ly, Lz,'-')
    ax.plot3D(0,0,0,'ob')
    for i in range(n):
        r=sqrt(xi[i]**2+yi[i]**2+zi[i]**2)
        if rmin>r:rmin=r
        F=k*q1*q2/r**2
        dvx[i]=dvx[i]+F*dt*(xi[i]/r)/mi
        dvy[i]=dvy[i]+F*dt*(yi[i]/r)/mi
        dvz[i]=dvz[i]+F*dt*(zi[i]/r)/mi
        xi[i]=xi[i]+dvx[i]*dt
        yi[i]=yi[i]+dvy[i]*dt
        zi[i]=zi[i]+dvz[i]*dt
    ax.plot3D(xi,yi,zi,'.r',markersize='3')
    ax.set_title("NUCLEAR COULOMB INTERACTION SIMULATION")
    ax.set_xlabel('X (m)')
    ax.set_ylabel('Y (m)')
    ax.set_zlabel('Z (m)')
    plt.pause(0.01)
    plt.clf()

ax = plt.axes(projection='3d')
ax.view_init(10,-90)
ax.grid()
ax.plot3D(-Lx, -Ly, -Lz,'-')
ax.plot3D(Lx, Ly, Lz,'-')
ax.plot3D(0,0,0,'ob')
ax.plot3D(xi,yi,zi,'.r',markersize='3')
ax.set_title("NUCLEAR COULOMB INTERACTION SIMULATION")
ax.set_xlabel('X (m)')
ax.set_ylabel('Y (m)')
ax.set_zlabel('Z (m)')
plt.show()

for i in range(n):
    r0=sqrt(L**2+xyz[i][1]**2+xyz[i][2]**2)
    ri=sqrt(xi[i]**2+yi[i]**2+zi[i]**2)
    dr=sqrt((L-xi[i])**2+(xyz[i][1]-yi[i])**2+(xyz[i][2]-zi[i])**2)
    a.append(degrees(acos((r0**2+ri**2-dr**2)/(2*r0*ri))))
    b.append(sqrt(xyz[i][1]**2+xyz[i][2]**2))
    if amin>a[i]:
        amin=a[i]
        b1=b[i]
    if a[i]>2.3 and a[i]<2.9:
        if b2<b[i]:b2=b[i]

for i in range(180):an.append(0)
for i in a:
    for j in range(180):
        if i>=j and i<(j+1):an[j]=an[j]+1
        if an[j]>anmax:anmax=an[j]

for i in range(180):
    if i==0:an0=an[i]/anmax
    if i==10:an1=an[i]/anmax
    if i==15:an2=an[i]/anmax
    if i==25:an3=an[i]/anmax
    if i==45:an4=an[i]/anmax
    plt.bar(i,an[i]/anmax,label=i,width=1)
plt.xlabel("SCATTERING ANGLE")
plt.ylabel("SCATTERING PARTICLE RATE")
plt.title("RUTHERFORD SCATTERING ANGLE-PARTICLE RATE")
plt.show()
plt.plot(a,b,'.r',markersize='2')
plt.xlabel("SCATTERING ANGLE")
plt.ylabel("IMPACT PARAMETER")
plt.title("RUTHERFORD SCATTERING ANGLE-IMPACT PARAMETER")
plt.show()

print(round(amin,2),'Degree b1:',b1)
print('2.6 Degree b2:',b2)
print('CoulombForceRadius rmin:',rmin)
print('0 Degree particle:',an0)
print('10 Degree particle:',an1)
print('15 Degree particle:',an2)
print('25 Degree particle:',an3)
print('45 Degree particle:',an4)
